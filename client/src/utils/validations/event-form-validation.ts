import * as z from 'zod';

const EventFormSchema = z.object({
  title: z.string(),
  description: z.string(),
  eventType: z.string(),
  eventCategory: z.string(),
  eventSubCategory: z.string(),
  eventBudget: z.string(),
  address: z.object({
    venueName: z.string(),
    venueAddress: z.string(),
    city: z.string(),
    state: z.string(),
    zipCode: z.string(),
  }),
  roomCount: z.number(),
  generalSessionCount: z.number(),
  breakoutSessionCount: z.number(),
  presenterCount: z.number(),
  microphones: z.object({
    wiredHandheld: z.number(),
    wirelessHandheld: z.number(),
    wirelessLavalier: z.number(),
    headsetMicrophone: z.number(),
    earsetMicrophone: z.number(),
    gooseneckMicrophone: z.number(),
    boundaryMicrophone: z.number(),
    audienceMicrophone: z.number(),
  }),
  speakers: z.object({
    speakers_8_15: z.number(),
    line_array_speaker_system: z.number(),
    subwoofer_12_18: z.number(),
    reference_speaker_monitors: z.number(),
    bluetooth_speaker_small: z.number(),
    bluetooth_speaker_large: z.number(),
    computer_audio_speaker_system: z.number(),
    audio_rigging_and_truss: z.number(),
  }),
  mixers: z.object({
    analog_mixer: z.number(),
    digital_mixer: z.number(),
    computer_audio_interface: z.number(),
    multi_media_DI_box: z.number(),
    broadcast_phone_line_interface: z.number(),
    digital_audio_recording: z.number(),
    audio_playback_instant_replay: z.number(),
    cd_player: z.number(),
    audio_processing: z.number(),
  }),
  communication: z.object({
    wireless_belt_pack_and_headset: z.number(),
    wired_belt_pack_and_headset: z.number(),
  }),
  screens: z.record(z.number()),
  projection: z.record(z.number()),
  videoCamera: z.record(z.number()),
  videoProcessing: z.record(z.number()),
  presenterTools: z.record(z.number()),
  lighting: z.record(z.number()),
  scenic: z.record(z.number()),
  electrical: z.record(z.number()),
  staff: z.record(z.number()),
  otherRequirements: z.record(z.number()),
  comments: z.object({
    description: z.string(),
  }),
});

export type EventFormFormValues = z.infer<typeof EventFormSchema>;
